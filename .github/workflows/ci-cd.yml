name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # ====================================================================
  # 테스트 단계
  # ====================================================================
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
      
    - name: Run backend tests
      run: |
        cd backend
        ./gradlew test --no-daemon

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # ====================================================================
  # 빌드 단계
  # ====================================================================
  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
      
    - name: Build backend JAR
      run: |
        cd backend
        ./gradlew build --no-daemon -x test
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=http://t1324.p.ssafy.io:8080/api
          VITE_APP_TITLE=방명록
          VITE_APP_VERSION=${{ github.sha }}
          VITE_ENVIRONMENT=production
          VITE_API_TIMEOUT=30000

  # ====================================================================
  # 배포 단계 (새로 추가!)
  # ====================================================================
  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to SSAFY server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        timeout: 300s  # 5분으로 제한
        command_timeout: 600s  # 10분으로 제한
        script: |
          set -e
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          export GITHUB_ACTOR=${{ github.actor }}
          export IMAGE_TAG=${{ github.sha }}
          
          echo "=== 배포 시작 ==="
          cd ~/guestbook
          
          # 기존 프로세스 정리
          pkill -f deploy.sh || true
          
          # 배포 실행
          chmod +x deploy.sh
          ./deploy.sh
          
          echo "=== 배포 완료 ==="
          
    - name: Verify deployment
      run: |
        echo "⏳ 배포 확인 중..."
        sleep 30
        
        # 백엔드 헬스체크
        if curl -f http://${{ secrets.SERVER_HOST }}:8080/actuator/health; then
          echo "✅ 백엔드 정상 작동!"
        else
          echo "❌ 백엔드 헬스체크 실패"
          exit 1
        fi
        
        echo "🎉 배포 성공!"
        echo "🌐 프론트엔드: http://${{ secrets.SERVER_HOST }}:3000"
        echo "🔧 백엔드: http://${{ secrets.SERVER_HOST }}:8080"
        echo "📊 헬스체크: http://${{ secrets.SERVER_HOST }}:8080/actuator/health"
        echo "💾 H2 콘솔: http://${{ secrets.SERVER_HOST }}:8080/h2-console"
